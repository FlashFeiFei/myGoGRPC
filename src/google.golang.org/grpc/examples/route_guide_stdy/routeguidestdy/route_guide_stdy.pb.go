// Code generated by protoc-gen-go. DO NOT EDIT.
// source: route_guide_stdy.proto

package routeguidestdy

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Point struct {
	Latitude             int32    `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            int32    `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_331ddd182830fb38, []int{0}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLatitude() int32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Point) GetLongitude() int32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type Rectangle struct {
	Lo                   *Point   `protobuf:"bytes,1,opt,name=lo,proto3" json:"lo,omitempty"`
	Hi                   *Point   `protobuf:"bytes,2,opt,name=hi,proto3" json:"hi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rectangle) Reset()         { *m = Rectangle{} }
func (m *Rectangle) String() string { return proto.CompactTextString(m) }
func (*Rectangle) ProtoMessage()    {}
func (*Rectangle) Descriptor() ([]byte, []int) {
	return fileDescriptor_331ddd182830fb38, []int{1}
}

func (m *Rectangle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rectangle.Unmarshal(m, b)
}
func (m *Rectangle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rectangle.Marshal(b, m, deterministic)
}
func (m *Rectangle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rectangle.Merge(m, src)
}
func (m *Rectangle) XXX_Size() int {
	return xxx_messageInfo_Rectangle.Size(m)
}
func (m *Rectangle) XXX_DiscardUnknown() {
	xxx_messageInfo_Rectangle.DiscardUnknown(m)
}

var xxx_messageInfo_Rectangle proto.InternalMessageInfo

func (m *Rectangle) GetLo() *Point {
	if m != nil {
		return m.Lo
	}
	return nil
}

func (m *Rectangle) GetHi() *Point {
	if m != nil {
		return m.Hi
	}
	return nil
}

type Feature struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Location             *Point   `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_331ddd182830fb38, []int{2}
}

func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

type RouteNote struct {
	Location             *Point   `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteNote) Reset()         { *m = RouteNote{} }
func (m *RouteNote) String() string { return proto.CompactTextString(m) }
func (*RouteNote) ProtoMessage()    {}
func (*RouteNote) Descriptor() ([]byte, []int) {
	return fileDescriptor_331ddd182830fb38, []int{3}
}

func (m *RouteNote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteNote.Unmarshal(m, b)
}
func (m *RouteNote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteNote.Marshal(b, m, deterministic)
}
func (m *RouteNote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteNote.Merge(m, src)
}
func (m *RouteNote) XXX_Size() int {
	return xxx_messageInfo_RouteNote.Size(m)
}
func (m *RouteNote) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteNote.DiscardUnknown(m)
}

var xxx_messageInfo_RouteNote proto.InternalMessageInfo

func (m *RouteNote) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *RouteNote) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RouteSummary struct {
	PointCount           int32    `protobuf:"varint,1,opt,name=point_count,json=pointCount,proto3" json:"point_count,omitempty"`
	FeatureCount         int32    `protobuf:"varint,2,opt,name=feature_count,json=featureCount,proto3" json:"feature_count,omitempty"`
	Distance             int32    `protobuf:"varint,3,opt,name=distance,proto3" json:"distance,omitempty"`
	ElapsedTime          int32    `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteSummary) Reset()         { *m = RouteSummary{} }
func (m *RouteSummary) String() string { return proto.CompactTextString(m) }
func (*RouteSummary) ProtoMessage()    {}
func (*RouteSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_331ddd182830fb38, []int{4}
}

func (m *RouteSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteSummary.Unmarshal(m, b)
}
func (m *RouteSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteSummary.Marshal(b, m, deterministic)
}
func (m *RouteSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteSummary.Merge(m, src)
}
func (m *RouteSummary) XXX_Size() int {
	return xxx_messageInfo_RouteSummary.Size(m)
}
func (m *RouteSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteSummary.DiscardUnknown(m)
}

var xxx_messageInfo_RouteSummary proto.InternalMessageInfo

func (m *RouteSummary) GetPointCount() int32 {
	if m != nil {
		return m.PointCount
	}
	return 0
}

func (m *RouteSummary) GetFeatureCount() int32 {
	if m != nil {
		return m.FeatureCount
	}
	return 0
}

func (m *RouteSummary) GetDistance() int32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *RouteSummary) GetElapsedTime() int32 {
	if m != nil {
		return m.ElapsedTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Point)(nil), "routeguidestdy.Point")
	proto.RegisterType((*Rectangle)(nil), "routeguidestdy.Rectangle")
	proto.RegisterType((*Feature)(nil), "routeguidestdy.Feature")
	proto.RegisterType((*RouteNote)(nil), "routeguidestdy.RouteNote")
	proto.RegisterType((*RouteSummary)(nil), "routeguidestdy.RouteSummary")
}

func init() { proto.RegisterFile("route_guide_stdy.proto", fileDescriptor_331ddd182830fb38) }

var fileDescriptor_331ddd182830fb38 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0x43, 0x4b, 0xe3, 0x49, 0xe8, 0x61, 0x10, 0x10, 0xa2, 0x4a, 0x05, 0x23, 0xa4, 0x9e,
	0xac, 0x52, 0x2e, 0x9c, 0x90, 0x68, 0x51, 0x72, 0x41, 0x28, 0x72, 0x39, 0xc0, 0xc9, 0x5a, 0xbc,
	0x83, 0xb3, 0xd2, 0xda, 0x6b, 0x79, 0xc7, 0x12, 0xfe, 0x1d, 0xfc, 0x0a, 0xfe, 0x25, 0xda, 0xb5,
	0x9d, 0x7e, 0xd0, 0x44, 0xbd, 0x79, 0xdf, 0xbc, 0x79, 0xfb, 0xe6, 0x8d, 0x17, 0x9e, 0xd7, 0xa6,
	0x61, 0x4a, 0xf3, 0x46, 0x49, 0x4a, 0x2d, 0xcb, 0x36, 0xae, 0x6a, 0xc3, 0x06, 0x8f, 0x3c, 0xee,
	0x61, 0x87, 0x46, 0x9f, 0xe0, 0x60, 0x65, 0x54, 0xc9, 0x38, 0x87, 0xb1, 0x16, 0xac, 0xb8, 0x91,
	0x34, 0x0b, 0x5e, 0x05, 0xa7, 0x07, 0xc9, 0xe6, 0x8c, 0xc7, 0x10, 0x6a, 0x53, 0xe6, 0x5d, 0x71,
	0xe4, 0x8b, 0xd7, 0x40, 0xf4, 0x03, 0xc2, 0x84, 0x32, 0x16, 0x65, 0xae, 0x09, 0xdf, 0xc2, 0x48,
	0x1b, 0x2f, 0x30, 0x39, 0x7f, 0x16, 0xdf, 0xbe, 0x2c, 0xf6, 0x37, 0x25, 0x23, 0x6d, 0x1c, 0x6d,
	0xad, 0xbc, 0xd4, 0x76, 0xda, 0x5a, 0x45, 0x2b, 0x38, 0x5c, 0x90, 0xe0, 0xa6, 0x26, 0x44, 0xd8,
	0x2f, 0x45, 0xd1, 0x79, 0x0b, 0x13, 0xff, 0x8d, 0xef, 0x60, 0xac, 0x4d, 0x26, 0x58, 0x99, 0x72,
	0xb7, 0xd6, 0x86, 0x16, 0x7d, 0x87, 0x30, 0x71, 0x8c, 0xaf, 0x86, 0x6f, 0xf7, 0x07, 0x0f, 0xea,
	0xc7, 0x19, 0x1c, 0x16, 0x64, 0xad, 0xc8, 0xbb, 0x20, 0xc2, 0x64, 0x38, 0x46, 0x7f, 0x02, 0x98,
	0x7a, 0xe9, 0xab, 0xa6, 0x28, 0x44, 0xdd, 0xe2, 0x09, 0x4c, 0x2a, 0xd7, 0x9d, 0x66, 0xa6, 0x29,
	0xb9, 0x0f, 0x15, 0x3c, 0x74, 0xe9, 0x10, 0x7c, 0x03, 0x4f, 0x7e, 0x75, 0xd3, 0xf5, 0x94, 0x2e,
	0xda, 0x69, 0x0f, 0x76, 0xa4, 0x39, 0x8c, 0xa5, 0xb2, 0x2c, 0xca, 0x8c, 0x66, 0x8f, 0xba, 0xbd,
	0x0c, 0x67, 0x7c, 0x0d, 0x53, 0xd2, 0xa2, 0xb2, 0x24, 0x53, 0x56, 0x05, 0xcd, 0xf6, 0x7d, 0x7d,
	0xd2, 0x63, 0xdf, 0x54, 0x41, 0xe7, 0x7f, 0x47, 0x70, 0xe4, 0x5d, 0x2d, 0xdd, 0x48, 0x57, 0x2c,
	0x5b, 0xfc, 0x08, 0xb0, 0x24, 0x1e, 0x72, 0xbd, 0x7f, 0xe2, 0xf9, 0x8b, 0xbb, 0x70, 0xcf, 0x8f,
	0xf6, 0x70, 0x01, 0xd3, 0x2f, 0xca, 0x0e, 0x02, 0x16, 0x5f, 0xde, 0xa5, 0x6e, 0xfe, 0x86, 0x1d,
	0x2a, 0x67, 0x01, 0x2e, 0x60, 0x92, 0x50, 0x66, 0x6a, 0xe9, 0xfd, 0x6d, 0x33, 0x72, 0xfc, 0x9f,
	0xfa, 0x8d, 0x8c, 0xa3, 0xbd, 0xd3, 0x00, 0x97, 0xfd, 0x4a, 0x2f, 0xd7, 0x82, 0xef, 0x31, 0x33,
	0x6c, 0x7b, 0xbe, 0xbd, 0xe4, 0x64, 0xce, 0x82, 0x8b, 0x0f, 0x70, 0xa2, 0x4c, 0x9c, 0xd7, 0x55,
	0x16, 0xd3, 0x6f, 0x51, 0x54, 0x9a, 0xec, 0x8d, 0x16, 0xc9, 0xb2, 0xbd, 0x78, 0x7a, 0x9d, 0xe5,
	0xca, 0xbd, 0xa7, 0xcf, 0x2c, 0xdb, 0x55, 0xf0, 0xf3, 0xb1, 0x7f, 0x5c, 0xef, 0xff, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x0d, 0x77, 0xfa, 0x64, 0x76, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouteGuideStdyClient is the client API for RouteGuideStdy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouteGuideStdyClient interface {
	//一个简单rpc，客户端使用存根发送请求服务器并等待响应返回，就像平常的函数调用一样
	GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)
	//一个服务器端流式rpc,客户端发送请求到服务器，拿到一个流去读取返回的消息序列。
	//客户端读取返回的流，直到里面没有任何信息。从例子中可以看出，通过在响应类型
	//插入stream关键字，可以指定一个服务器端的流方法
	ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (RouteGuideStdy_ListFeaturesClient, error)
	//一个客户端流式rpc，客户端写入一个消息序列，并将其发送到服务器，同样也是
	//使用流。一旦客户端完成写入消息，它等待服务器完成读取返回它的响应。
	//通过在请求类型前指定stream关键字来指定一个客户端的流方法
	RecordRoute(ctx context.Context, opts ...grpc.CallOption) (RouteGuideStdy_RecordRouteClient, error)
	//一个双向流式rpc是双方使用读写流去发送一个消息序列。两个流独立操作.
	//因此客户端和服务器可以以任意喜欢的顺序读写：比如，服务器可以在写入响应前
	//等待接受所有的客户端消息，或者可以交替读取和写入信息，或者其他读写的组合。
	//每个流中的消息顺序被预留。你可以通过在请求和响应前加上stream关键字去指定方法的类型
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (RouteGuideStdy_RouteChatClient, error)
}

type routeGuideStdyClient struct {
	cc *grpc.ClientConn
}

func NewRouteGuideStdyClient(cc *grpc.ClientConn) RouteGuideStdyClient {
	return &routeGuideStdyClient{cc}
}

func (c *routeGuideStdyClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/routeguidestdy.RouteGuideStdy/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideStdyClient) ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (RouteGuideStdy_ListFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RouteGuideStdy_serviceDesc.Streams[0], "/routeguidestdy.RouteGuideStdy/ListFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGuideStdyListFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RouteGuideStdy_ListFeaturesClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type routeGuideStdyListFeaturesClient struct {
	grpc.ClientStream
}

func (x *routeGuideStdyListFeaturesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeGuideStdyClient) RecordRoute(ctx context.Context, opts ...grpc.CallOption) (RouteGuideStdy_RecordRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RouteGuideStdy_serviceDesc.Streams[1], "/routeguidestdy.RouteGuideStdy/RecordRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGuideStdyRecordRouteClient{stream}
	return x, nil
}

type RouteGuideStdy_RecordRouteClient interface {
	Send(*Point) error
	CloseAndRecv() (*RouteSummary, error)
	grpc.ClientStream
}

type routeGuideStdyRecordRouteClient struct {
	grpc.ClientStream
}

func (x *routeGuideStdyRecordRouteClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeGuideStdyRecordRouteClient) CloseAndRecv() (*RouteSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RouteSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeGuideStdyClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (RouteGuideStdy_RouteChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RouteGuideStdy_serviceDesc.Streams[2], "/routeguidestdy.RouteGuideStdy/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGuideStdyRouteChatClient{stream}
	return x, nil
}

type RouteGuideStdy_RouteChatClient interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ClientStream
}

type routeGuideStdyRouteChatClient struct {
	grpc.ClientStream
}

func (x *routeGuideStdyRouteChatClient) Send(m *RouteNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeGuideStdyRouteChatClient) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouteGuideStdyServer is the server API for RouteGuideStdy service.
type RouteGuideStdyServer interface {
	//一个简单rpc，客户端使用存根发送请求服务器并等待响应返回，就像平常的函数调用一样
	GetFeature(context.Context, *Point) (*Feature, error)
	//一个服务器端流式rpc,客户端发送请求到服务器，拿到一个流去读取返回的消息序列。
	//客户端读取返回的流，直到里面没有任何信息。从例子中可以看出，通过在响应类型
	//插入stream关键字，可以指定一个服务器端的流方法
	ListFeatures(*Rectangle, RouteGuideStdy_ListFeaturesServer) error
	//一个客户端流式rpc，客户端写入一个消息序列，并将其发送到服务器，同样也是
	//使用流。一旦客户端完成写入消息，它等待服务器完成读取返回它的响应。
	//通过在请求类型前指定stream关键字来指定一个客户端的流方法
	RecordRoute(RouteGuideStdy_RecordRouteServer) error
	//一个双向流式rpc是双方使用读写流去发送一个消息序列。两个流独立操作.
	//因此客户端和服务器可以以任意喜欢的顺序读写：比如，服务器可以在写入响应前
	//等待接受所有的客户端消息，或者可以交替读取和写入信息，或者其他读写的组合。
	//每个流中的消息顺序被预留。你可以通过在请求和响应前加上stream关键字去指定方法的类型
	RouteChat(RouteGuideStdy_RouteChatServer) error
}

func RegisterRouteGuideStdyServer(s *grpc.Server, srv RouteGuideStdyServer) {
	s.RegisterService(&_RouteGuideStdy_serviceDesc, srv)
}

func _RouteGuideStdy_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideStdyServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routeguidestdy.RouteGuideStdy/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideStdyServer).GetFeature(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuideStdy_ListFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Rectangle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouteGuideStdyServer).ListFeatures(m, &routeGuideStdyListFeaturesServer{stream})
}

type RouteGuideStdy_ListFeaturesServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type routeGuideStdyListFeaturesServer struct {
	grpc.ServerStream
}

func (x *routeGuideStdyListFeaturesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func _RouteGuideStdy_RecordRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteGuideStdyServer).RecordRoute(&routeGuideStdyRecordRouteServer{stream})
}

type RouteGuideStdy_RecordRouteServer interface {
	SendAndClose(*RouteSummary) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type routeGuideStdyRecordRouteServer struct {
	grpc.ServerStream
}

func (x *routeGuideStdyRecordRouteServer) SendAndClose(m *RouteSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeGuideStdyRecordRouteServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RouteGuideStdy_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteGuideStdyServer).RouteChat(&routeGuideStdyRouteChatServer{stream})
}

type RouteGuideStdy_RouteChatServer interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ServerStream
}

type routeGuideStdyRouteChatServer struct {
	grpc.ServerStream
}

func (x *routeGuideStdyRouteChatServer) Send(m *RouteNote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeGuideStdyRouteChatServer) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RouteGuideStdy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routeguidestdy.RouteGuideStdy",
	HandlerType: (*RouteGuideStdyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeature",
			Handler:    _RouteGuideStdy_GetFeature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFeatures",
			Handler:       _RouteGuideStdy_ListFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordRoute",
			Handler:       _RouteGuideStdy_RecordRoute_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RouteChat",
			Handler:       _RouteGuideStdy_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "route_guide_stdy.proto",
}
